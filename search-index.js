var searchIndex = {};
searchIndex["protocoll"] = {"doc":"some basic protocols and implementations for rust collections. inspired by\nclojure&#39;s design, albeit not persistent.","items":[[8,"Coll","protocoll","basic protocol for collections.",null,null],[10,"inc","","increment to incorporate `i`. both `Vec` and `VecDeque` grows to the right.",0,null],[11,"into","","pour another `coll` into this one.",0,null],[10,"shrink","","`shrink_to_fit`.",0,null],[10,"empty","","`clear`.",0,null],[8,"Map","","basic protocol for maps.",null,null],[10,"mapfn","","a map maps from keys to values.",1,null],[11,"assoc","","like clojure&#39;s [assoc](http://clojuredocs.org/clojure.core/assoc).",1,null],[10,"dissoc","","like clojure&#39;s [dissoc](http://clojuredocs.org/clojure.core/dissoc).",1,null],[10,"update","","like clojure&#39;s [update](http://clojuredocs.org/clojure.core/update).",1,null],[11,"merge","","like clojure&#39;s [merge-with](http://clojuredocs.org/clojure.core/merge-with).",1,null],[8,"Set","","basic protocol for sets.",null,null],[10,"setfn","","a set maps from items to themselves.",2,null],[10,"lose","","removes `i`.",2,null],[8,"Seq","","basic protocol for seqs.",null,null],[10,"seqfn","","a seq maps from indices to items. O(n) for `BinaryHeap`.",3,null],[10,"dec","","removes an item. for `Vec` it&#39;s the last one; for `VecDeque` the first;\nfor `BinaryHeap` it&#39;s the greatest one. see also `Coll::inc`.",3,null],[11,"into","","pour another `coll` into this one.",0,null],[11,"assoc","","like clojure&#39;s [assoc](http://clojuredocs.org/clojure.core/assoc).",1,null],[11,"merge","","like clojure&#39;s [merge-with](http://clojuredocs.org/clojure.core/merge-with).",1,null]],"paths":[[8,"Coll"],[8,"Map"],[8,"Set"],[8,"Seq"]]};
initSearch(searchIndex);
