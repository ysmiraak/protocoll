var searchIndex = {};
searchIndex["protocoll"] = {"doc":"some basic protocols and implementations for rust collections. inspired by\nclojure&#39;s design, albeit not persistent.","items":[[0,"map","protocoll","",null,null],[3,"VecSortedMap","protocoll::map","an array-map sorted by key.",null,null],[0,"set","protocoll","",null,null],[3,"VecSortedSet","protocoll::set","an array-set.",null,null],[8,"Map","protocoll","basic protocol for maps.",null,null],[10,"fun","","a map maps from keys to values.",0,null],[10,"inc","","adds `v` at `k`.",0,null],[10,"dec","","removes key `k`.",0,null],[11,"plus","","pours another collection into this one.",0,null],[10,"zero","","`clear`.",0,null],[10,"shrink","","`shrink_to_fit`.",0,null],[10,"update","","updates the value at `k` by `f`.",0,null],[11,"merge","","todo",0,null],[10,"update_mut","","like [`Map::update`](#method.update) but can be more efficient.",0,null],[10,"merge_in_place","","like `Map::merge` but can be more efficient.",0,null],[8,"Set","","basic protocol for sets.",null,null],[10,"fun","","a set maps from items to themselves.",1,null],[10,"inc","","adds item `i`.",1,null],[10,"dec","","removes item `i`.",1,null],[11,"plus","","pours another collection into this one.",1,null],[10,"zero","","`clear`.",1,null],[10,"shrink","","`shrink_to_fit`.",1,null],[8,"Seq","","basic protocol for seqs.",null,null],[10,"fun","","a seq maps from indices to items. O(n) for `BinaryHeap`.",2,null],[10,"inc","","adds item `i`. both `Vec` and `VecDeque` grows to the right.",2,null],[10,"dec","","removes an item. for `Vec` it&#39;s the last one; for `VecDeque` the first;\nfor `BinaryHeap` it&#39;s the greatest one.",2,null],[11,"plus","","pours another collection into this one.",2,null],[10,"zero","","`clear`.",2,null],[10,"shrink","","`shrink_to_fit`.",2,null],[8,"Str","","basic protocol for strs;",null,null],[10,"inc","","appends char `c`.",3,null],[10,"dec","","pops the last char.",3,null],[10,"plus","","appends str `s`.",3,null],[10,"zero","","`clear`.",3,null],[10,"shrink","","`shrink_to_fit`.",3,null],[11,"plus","","pours another collection into this one.",0,null],[11,"merge","","todo",0,null],[11,"default","protocoll::map","",4,{"inputs":[],"output":{"name":"vecsortedmap"}}],[11,"clone","","",4,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"partial_cmp","","",4,null],[11,"lt","","",4,null],[11,"le","","",4,null],[11,"gt","","",4,null],[11,"ge","","",4,null],[11,"cmp","","",4,null],[11,"hash","","",4,null],[11,"new","","",4,{"inputs":[],"output":{"name":"self"}}],[11,"with_capacity","","",4,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"capacity","","",4,null],[11,"reserve","","",4,null],[11,"shrink_to_fit","","",4,null],[11,"clear","","",4,null],[11,"contains_key","","O(log(len))",4,null],[11,"get","","O(log(len))",4,null],[11,"get_mut","","O(log(len))",4,null],[11,"insert","","O(log(len)) when `k` already exists. O(len) for inserting a new entry,\ncaused by shifting all entries after it, which can be avoided by always\ninserting in order.",4,null],[11,"remove","","O(log(len)) when `k` does not exist. O(len) for removing an entry,\nbecause of the need for shifting all entries after it.",4,null],[11,"append","","",4,null],[11,"view_content","","a view for the underlying vec. `&amp;self` methods for `Vec` such as `get`\nand `split` can be accessed through this.",4,null],[11,"iter","","iterate over the underlying vec. note: iterator element type is **not**\n`(&amp;K,&amp;V)` but rather `&amp;(K,V)`. `iter_mut` is not supported for this\ncollection. see [`update_all_in_place`](#method.update_all_in_place) for\nthe same functionality.",4,null],[11,"len","","",4,null],[11,"is_empty","","",4,null],[11,"update_all_in_place","","this makes up for the (intended) absence of `iter_mut`.",4,null],[11,"into_iter","","",4,null],[11,"extend","","",4,null],[11,"extend","","",4,null],[11,"from_iter","","",4,{"inputs":[{"name":"i"}],"output":{"name":"vecsortedmap"}}],[11,"index","","",4,null],[11,"fmt","","",4,null],[11,"fun","","",4,null],[11,"inc","","",4,null],[11,"dec","","",4,null],[11,"zero","","",4,null],[11,"shrink","","",4,null],[11,"update","","",4,null],[11,"update_mut","","",4,null],[11,"merge_in_place","","",4,null],[11,"plus","protocoll","pours another collection into this one.",1,null],[11,"default","protocoll::set","",5,{"inputs":[],"output":{"name":"vecsortedset"}}],[11,"clone","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"partial_cmp","","",5,null],[11,"lt","","",5,null],[11,"le","","",5,null],[11,"gt","","",5,null],[11,"ge","","",5,null],[11,"cmp","","",5,null],[11,"hash","","",5,null],[11,"new","","",5,{"inputs":[],"output":{"name":"self"}}],[11,"with_capacity","","",5,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"capacity","","",5,null],[11,"reserve","","",5,null],[11,"shrink_to_fit","","",5,null],[11,"clear","","",5,null],[11,"contains","","O(log(len))",5,null],[11,"get","","O(log(len))",5,null],[11,"get_mut","","O(log(len))",5,null],[11,"insert","","O(log(len)) when `e` already exists. O(len) for inserting a new element,\ncaused by shifting all elements after it, which can be avoided by always\ninserting in order.",5,null],[11,"remove","","O(log(len)) when `e` does not exist. O(len) for removing an element,\nbecause of the need for shifting all elements after it.",5,null],[11,"append","","",5,null],[11,"view_content","","a view for the underlying vec. `&amp;self` methods for `Vec` such as `get`\nand `split` can be accessed through this.",5,null],[11,"iter","","iterate over the underlying vec.",5,null],[11,"len","","",5,null],[11,"is_empty","","",5,null],[11,"into_iter","","",5,null],[11,"extend","","",5,null],[11,"extend","","",5,null],[11,"from_iter","","",5,{"inputs":[{"name":"i"}],"output":{"name":"vecsortedset"}}],[11,"index","","",5,null],[11,"fmt","","",5,null],[11,"fun","","",5,null],[11,"inc","","",5,null],[11,"dec","","",5,null],[11,"zero","","",5,null],[11,"shrink","","",5,null],[11,"bitor","","union.",5,null],[11,"bitand","","intersection.",5,null],[11,"bitxor","","symmetric difference.",5,null],[11,"sub","","difference.",5,null],[11,"plus","protocoll","pours another collection into this one.",2,null]],"paths":[[8,"Map"],[8,"Set"],[8,"Seq"],[8,"Str"],[3,"VecSortedMap"],[3,"VecSortedSet"]]};
initSearch(searchIndex);
